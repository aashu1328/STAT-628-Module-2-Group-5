})
output$weight_error_message <- reactive({
validate(need((input$weight >= 40 && input$weight <= 200), "wrong input: weight should be between 40kg to 200kg"))
})
output$height_error_message <- reactive({
validate(need((input$height > 100 && input$height < 200), "wrong input: height should be between 100cm and 200cm"))
})
#import df
bodyfat_data <- reactive({
bodyfat
})
#Prediction output
output$final_prediction <- renderText({
input$button
req(input$button)
observeEvent(input$button,{
if( input$age == NULL || input$weight == NULL || input$heigh == NULL){
showModal(modalDialog(title = 'Warning!!!','Please fiil out all the required fields!!!'))
}
})
test_df = data.frame()
test_df[1,] = c(1)
model_formula = paste('BODYFAT','HEIGHT', sep = '~')
if (isTruthy(input$age)){
model_formula = paste(model_formula,'AGE',sep = '+')
test_df$AGE = c(input$age)
}
if (isTruthy(input$weight)){
model_formula = paste(model_formula,'WEIGHT',sep = '+')
test_df$WEIGHT = c(input$weight)
}
if (isTruthy(input$height)){
model_formula = paste(model_formula,'HEIGHT',sep = '+')
test_df$HEIGHT = c(input$height)
}
model <- lm(model_formula, data = bodyfat_data())
isolate(paste0('\n','You body fat is ', predict(model, newdata = test_df),'%'))
})
}
shinyApp(ui, server)
library(shiny)
library(shinyvalidate)
library(shinyjs)
bodyfat <- read.csv('BodyFat_Clean.csv')
ui <- fluidPage(
#set title
titlePanel("Body fat prediction"),
#set all input box
numericInput("age", "age*:", NULL, min = 16, max = 90),
textOutput('age_error_message'),
tags$style(type="text/css", "age {color: red}"),
numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
textOutput('weight_error_message'),
tags$style(type="text/css", "weight {color: red}"),
numericInput("height", "height*", NULL, min = min(bodyfat$HEIGHT), max = max(bodyfat$HEIGHT)),
textOutput('height_error_message'),
tags$style(type="text/css", "height {color: red}"),
actionButton("button", "View your result"),
useShinyjs(),
radioButtons('refresh','refresh result'),
textOutput('final_prediction'),
dataTableOutput('table')
)
server <- function(input, output) {
#set the necessary input here
iv <- InputValidator$new()
iv$add_rule("age", sv_required())
iv$add_rule("weight", sv_required())
iv$add_rule("height", sv_required())
iv$enable()
#尝试refresh按键
observeEvent(input$refresh,{
hide('final_prediction')
})
#Below are the range of each input and error message
output$age_error_message <- reactive({
validate(need((input$age >= 10 && input$age <= 90), "wrong input: age should be between 10 and 90"))
})
output$weight_error_message <- reactive({
validate(need((input$weight >= 40 && input$weight <= 200), "wrong input: weight should be between 40kg to 200kg"))
})
output$height_error_message <- reactive({
validate(need((input$height > 100 && input$height < 200), "wrong input: height should be between 100cm and 200cm"))
})
#import df
bodyfat_data <- reactive({
bodyfat
})
#Prediction output
output$final_prediction <- renderText({
input$button
req(input$button)
observeEvent(input$button,{
if( input$age == NULL || input$weight == NULL || input$heigh == NULL){
showModal(modalDialog(title = 'Warning!!!','Please fiil out all the required fields!!!'))
}
})
test_df = data.frame()
test_df[1,] = c(1)
model_formula = paste('BODYFAT','HEIGHT', sep = '~')
if (isTruthy(input$age)){
model_formula = paste(model_formula,'AGE',sep = '+')
test_df$AGE = c(input$age)
}
if (isTruthy(input$weight)){
model_formula = paste(model_formula,'WEIGHT',sep = '+')
test_df$WEIGHT = c(input$weight)
}
if (isTruthy(input$height)){
model_formula = paste(model_formula,'HEIGHT',sep = '+')
test_df$HEIGHT = c(input$height)
}
model <- lm(model_formula, data = bodyfat_data())
isolate(paste0('\n','You body fat is ', predict(model, newdata = test_df),'%'))
})
}
shinyApp(ui, server)
library(shiny)
library(shinyvalidate)
library(shinyjs)
bodyfat <- read.csv('BodyFat_Clean.csv')
ui <- fluidPage(
#set title
titlePanel("Body fat prediction"),
#set all input box
numericInput("age", "age*:", NULL, min = 16, max = 90),
textOutput('age_error_message'),
tags$style(type="text/css", "age {color: red}"),
numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
textOutput('weight_error_message'),
tags$style(type="text/css", "weight {color: red}"),
numericInput("height", "height*", NULL, min = min(bodyfat$HEIGHT), max = max(bodyfat$HEIGHT)),
textOutput('height_error_message'),
tags$style(type="text/css", "height {color: red}"),
actionButton("button", "View your result"),
useShinyjs(),
radioButtons('refresh','refresh result'),
textOutput('final_prediction'),
dataTableOutput('table')
)
server <- function(input, output) {
#set the necessary input here
iv <- InputValidator$new()
iv$add_rule("age", sv_required())
iv$add_rule("weight", sv_required())
iv$add_rule("height", sv_required())
iv$enable()
#尝试refresh按键
observeEvent(input$refresh,{
hide('final_prediction')
})
#Below are the range of each input and error message
output$age_error_message <- reactive({
validate(need((input$age >= 10 && input$age <= 90), "wrong input: age should be between 10 and 90"))
})
output$weight_error_message <- reactive({
validate(need((input$weight >= 40 && input$weight <= 200), "wrong input: weight should be between 40kg to 200kg"))
})
output$height_error_message <- reactive({
validate(need((input$height > 100 && input$height < 200), "wrong input: height should be between 100cm and 200cm"))
})
#import df
bodyfat_data <- reactive({
bodyfat
})
#Prediction output
output$final_prediction <- renderText({
input$button
req(input$button)
observeEvent(input$button,{
if( input$age == NULL || input$weight == NULL || input$heigh == NULL){
showModal(modalDialog(title = 'Warning!!!','Please fiil out all the required fields!!!'))
}
})
test_df = data.frame()
test_df[1,] = c(1)
model_formula = paste('BODYFAT','HEIGHT', sep = '~')
if (isTruthy(input$age)){
model_formula = paste(model_formula,'AGE',sep = '+')
test_df$AGE = c(input$age)
}
if (isTruthy(input$weight)){
model_formula = paste(model_formula,'WEIGHT',sep = '+')
test_df$WEIGHT = c(input$weight)
}
if (isTruthy(input$height)){
model_formula = paste(model_formula,'HEIGHT',sep = '+')
test_df$HEIGHT = c(input$height)
}
model <- lm(model_formula, data = bodyfat_data())
isolate(paste0('\n','You body fat is ', predict(model, newdata = test_df),'%'))
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(shinyvalidate)
library(shinyjs)
bodyfat <- read.csv('BodyFat_Clean.csv')
ui <- fluidPage(
#set title
titlePanel("Body fat prediction"),
#set all input box
numericInput("age", "age*:", NULL, min = 16, max = 90),
textOutput('age_error_message'),
tags$style(type="text/css", "age {color: red}"),
numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
textOutput('weight_error_message'),
tags$style(type="text/css", "weight {color: red}"),
numericInput("height", "height*", NULL, min = min(bodyfat$HEIGHT), max = max(bodyfat$HEIGHT)),
textOutput('height_error_message'),
tags$style(type="text/css", "height {color: red}"),
actionButton("button", "View your result"),
useShinyjs(),
radioButtons('refresh','refresh result'),
textOutput('final_prediction'),
dataTableOutput('table')
)
server <- function(input, output) {
#set the necessary input here
iv <- InputValidator$new()
iv$add_rule("age", sv_required())
iv$add_rule("weight", sv_required())
iv$add_rule("height", sv_required())
iv$enable()
#尝试refresh按键
observeEvent(input$refresh,{
hide('final_prediction')
})
#Below are the range of each input and error message
output$age_error_message <- reactive({
validate(need((input$age >= 10 && input$age <= 90), "wrong input: age should be between 10 and 90"))
})
output$weight_error_message <- reactive({
validate(need((input$weight >= 40 && input$weight <= 200), "wrong input: weight should be between 40kg to 200kg"))
})
output$height_error_message <- reactive({
validate(need((input$height > 100 && input$height < 200), "wrong input: height should be between 100cm and 200cm"))
})
#import df
bodyfat_data <- reactive({
bodyfat
})
#Prediction output
output$final_prediction <- renderText({
input$button
req(input$button)
observeEvent(input$button,{
if( input$age == NULL || input$weight == NULL || input$heigh == NULL){
showModal(modalDialog(title = 'Warning!!!','Please fiil out all the required fields!!!'))
}
})
test_df = data.frame()
test_df[1,] = c(1)
model_formula = paste('BODYFAT','HEIGHT', sep = '~')
if (isTruthy(input$age)){
model_formula = paste(model_formula,'AGE',sep = '+')
test_df$AGE = c(input$age)
}
if (isTruthy(input$weight)){
model_formula = paste(model_formula,'WEIGHT',sep = '+')
test_df$WEIGHT = c(input$weight)
}
if (isTruthy(input$height)){
model_formula = paste(model_formula,'HEIGHT',sep = '+')
test_df$HEIGHT = c(input$height)
}
model <- lm(model_formula, data = bodyfat_data())
isolate(paste0('\n','You body fat is ', predict(model, newdata = test_df),'%'))
})
}
#shinyApp(ui=ui, server=server)
library(shiny)
library(shinyvalidate)
library(tidyverse)
bodyfat <- read.csv('bodyfat.csv')
bodyfat_simple <- bodyfat %>%  select(HEIGHT, WEIGHT, BODYFAT)
model <- lm(paste('BODYFAT','HEIGHT+WEIGHT', sep = '~'),data = bodyfat_simple)
summary(model)
# ggplot(bodyfat_simple, aes(WEIGHT,HEIGHT))+
#   geom_point()+
#   stat_smooth(method = lm)
library(shiny)
library(shinyvalidate)
library(shinyjs)
bodyfat <- read.csv('BodyFat_Clean.csv')
ui <- fluidPage(
#set title
titlePanel("Body fat prediction"),
#set all input box
numericInput("age", "age*:", NULL, min = 16, max = 90),
textOutput('age_error_message'),
tags$style(type="text/css", "age {color: red}"),
numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
textOutput('weight_error_message'),
tags$style(type="text/css", "weight {color: red}"),
numericInput("height", "height*", NULL, min = min(bodyfat$HEIGHT), max = max(bodyfat$HEIGHT)),
textOutput('height_error_message'),
tags$style(type="text/css", "height {color: red}"),
actionButton("button", "View your result"),
useShinyjs(),
radioButtons('refresh','refresh result'),
textOutput('final_prediction'),
dataTableOutput('table')
)
server <- function(input, output) {
#set the necessary input here
iv <- InputValidator$new()
iv$add_rule("age", sv_required())
iv$add_rule("weight", sv_required())
iv$add_rule("height", sv_required())
iv$enable()
#尝试refresh按键
observeEvent(input$refresh,{
hide('final_prediction')
})
#Below are the range of each input and error message
output$age_error_message <- reactive({
validate(need((input$age >= 10 && input$age <= 90), "wrong input: age should be between 10 and 90"))
})
output$weight_error_message <- reactive({
validate(need((input$weight >= 40 && input$weight <= 200), "wrong input: weight should be between 40kg to 200kg"))
})
output$height_error_message <- reactive({
validate(need((input$height > 100 && input$height < 200), "wrong input: height should be between 100cm and 200cm"))
})
#import df
bodyfat_data <- reactive({
bodyfat
})
#Prediction output
output$final_prediction <- renderText({
input$button
req(input$button)
observeEvent(input$button,{
if( input$age == NULL || input$weight == NULL || input$heigh == NULL){
showModal(modalDialog(title = 'Warning!!!','Please fiil out all the required fields!!!'))
}
})
test_df = data.frame()
test_df[1,] = c(1)
model_formula = paste('BODYFAT','HEIGHT', sep = '~')
if (isTruthy(input$age)){
model_formula = paste(model_formula,'AGE',sep = '+')
test_df$AGE = c(input$age)
}
if (isTruthy(input$weight)){
model_formula = paste(model_formula,'WEIGHT',sep = '+')
test_df$WEIGHT = c(input$weight)
}
if (isTruthy(input$height)){
model_formula = paste(model_formula,'HEIGHT',sep = '+')
test_df$HEIGHT = c(input$height)
}
model <- lm(model_formula, data = bodyfat_data())
isolate(paste0('\n','You body fat is ', predict(model, newdata = test_df),'%'))
})
}
shinyApp(ui, server)
library(shiny)
library(shinyvalidate)
library(shinyjs)
bodyfat <- read.csv('BodyFat_Clean.csv')
ui <- fluidPage(
#set title
titlePanel("Body fat prediction"),
#set all input box
numericInput("age", "age*:", NULL, min = 16, max = 90),
textOutput('age_error_message'),
tags$style(type="text/css", "age {color: red}"),
numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
textOutput('weight_error_message'),
tags$style(type="text/css", "weight {color: red}"),
numericInput("height", "height*", NULL, min = min(bodyfat$HEIGHT), max = max(bodyfat$HEIGHT)),
textOutput('height_error_message'),
tags$style(type="text/css", "height {color: red}"),
actionButton("button", "View your result"),
useShinyjs(),
radioButtons('refresh','refresh result'),
textOutput('final_prediction'),
dataTableOutput('table')
)
server <- function(input, output) {
#set the necessary input here
iv <- InputValidator$new()
iv$add_rule("age", sv_required())
iv$add_rule("weight", sv_required())
iv$add_rule("height", sv_required())
iv$enable()
#尝试refresh按键
observeEvent(input$refresh,{
hide('final_prediction')
})
#Below are the range of each input and error message
output$age_error_message <- reactive({
validate(need((input$age >= 10 && input$age <= 90), "wrong input: age should be between 10 and 90"))
})
output$weight_error_message <- reactive({
validate(need((input$weight >= 40 && input$weight <= 200), "wrong input: weight should be between 40kg to 200kg"))
})
output$height_error_message <- reactive({
validate(need((input$height > 100 && input$height < 200), "wrong input: height should be between 100cm and 200cm"))
})
#import df
bodyfat_data <- reactive({
bodyfat
})
#Prediction output
output$final_prediction <- renderText({
input$button
req(input$button)
# observeEvent(input$button,{
#   if( is.null(input$age) == NULL || input$weight == NULL || input$heigh == NULL){
#     showModal(modalDialog(title = 'Warning!!!','Please fiil out all the required fields!!!'))
#   }
# })
test_df = data.frame()
test_df[1,] = c(1)
model_formula = paste('BODYFAT','HEIGHT', sep = '~')
if (isTruthy(input$age)){
model_formula = paste(model_formula,'AGE',sep = '+')
test_df$AGE = c(input$age)
}
if (isTruthy(input$weight)){
model_formula = paste(model_formula,'WEIGHT',sep = '+')
test_df$WEIGHT = c(input$weight)
}
if (isTruthy(input$height)){
model_formula = paste(model_formula,'HEIGHT',sep = '+')
test_df$HEIGHT = c(input$height)
}
model <- lm(model_formula, data = bodyfat_data())
isolate(paste0('\n','You body fat is ', predict(model, newdata = test_df),'%'))
})
}
shinyApp(ui, server)
library(shiny)
library(shinyvalidate)
library(shinyjs)
bodyfat <- read.csv('BodyFat_Clean.csv')
ui <- fluidPage(
#set title
titlePanel("Body fat prediction"),
#set all input box
numericInput("age", "age*:", NULL, min = 16, max = 90),
textOutput('age_error_message'),
tags$style(type="text/css", "age {color: red}"),
numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
textOutput('weight_error_message'),
tags$style(type="text/css", "weight {color: red}"),
numericInput("height", "height*", NULL, min = min(bodyfat$HEIGHT), max = max(bodyfat$HEIGHT)),
textOutput('height_error_message'),
tags$style(type="text/css", "height {color: red}"),
actionButton("button", "View your result"),
useShinyjs(),
radioButtons('refresh','refresh result'),
textOutput('final_prediction'),
dataTableOutput('table')
)
server <- function(input, output) {
#set the necessary input here
iv <- InputValidator$new()
iv$add_rule("age", sv_required())
iv$add_rule("weight", sv_required())
iv$add_rule("height", sv_required())
iv$enable()
#尝试refresh按键
observeEvent(input$refresh,{
hide('final_prediction')
})
#Below are the range of each input and error message
output$age_error_message <- reactive({
validate(need((input$age >= 10 && input$age <= 90), "wrong input: age should be between 10 and 90"))
})
output$weight_error_message <- reactive({
validate(need((input$weight >= 40 && input$weight <= 200), "wrong input: weight should be between 40kg to 200kg"))
})
output$height_error_message <- reactive({
validate(need((input$height > 100 && input$height < 200), "wrong input: height should be between 100cm and 200cm"))
})
#import df
bodyfat_data <- reactive({
bodyfat
})
#Prediction output
output$final_prediction <- renderText({
input$button
req(input$button)
observeEvent(input$button,{
if( is.null(input$age) || is.null(input$weight) || is.null(input$heigh)){
showModal(modalDialog(title = 'Warning!!!','Please fiil out all the required fields!!!'))
}
})
test_df = data.frame()
test_df[1,] = c(1)
model_formula = paste('BODYFAT','HEIGHT', sep = '~')
if (isTruthy(input$age)){
model_formula = paste(model_formula,'AGE',sep = '+')
test_df$AGE = c(input$age)
}
if (isTruthy(input$weight)){
model_formula = paste(model_formula,'WEIGHT',sep = '+')
test_df$WEIGHT = c(input$weight)
}
if (isTruthy(input$height)){
model_formula = paste(model_formula,'HEIGHT',sep = '+')
test_df$HEIGHT = c(input$height)
}
model <- lm(model_formula, data = bodyfat_data())
isolate(paste0('\n','You body fat is ', predict(model, newdata = test_df),'%'))
})
}
shinyApp(ui, server)
