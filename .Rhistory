titlePanel("Body fat prediction"),
tags$head(tags$style(HTML(" .shiny-output-error-validation {color: #ff0000;font-weight: bold;}"))),
numericInput("age", "age*:", NULL, min = 18, max = 90),
textOutput('age_error_message',),
tags$head(tags$style("#age_error_message{color: red;font-size: 12px;font-style: italic; }")),
numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
textOutput('weight_error_message'),
tags$head(tags$style("#weight_error_message{color: red;
font-size: 12px;
font-style: italic;
}")),
numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
textOutput('weight_error_message'),
tags$head(tags$style("#weight_error_message{color: red;font-size: 12px;font-style: italic;}")),
actionButton("button", "View your result"),
plotOutput('result_bar'),
textOutput('final_prediction'),
tags$head(tags$style("#final_prediction{color: green;font-size: 20px;font-style: bold;}"))
# fluidRow(
#   column(width = 4,
#     # wellPanel(
#         numericInput("age", "age*:", NULL, min = 18, max = 90),
#
#
#         numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
#
#
#         numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
#
#
#
#     # )
#   ),
#
#   column(width = 4,
#                   textOutput('age_error_message',),
#         tags$head(tags$style("#age_error_message{color: red;font-size: 12px;font-style: italic; }")),
#
#                   textOutput('weight_error_message'),
#         tags$head(tags$style("#weight_error_message{color: red;font-size: 12px;font-style: italic;}")),
#
#                   textOutput('weight_error_message'),
#         tags$head(tags$style("#weight_error_message{color: red;font-size: 12px;font-style: italic;}"))
#          )
# ),
)
# fluidRow(
#     column(width = 4,
#     textOutput('final_prediction'),
#     tags$head(tags$style("#final_prediction{color: green;font-size: 20px;font-style: bold;}"))
#     ),
#     column(width = 4,plotOutput('result_bar'))
# )
# fluidRow(
#       column(3,
#          numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
#       textOutput('weight_error_message'),
#       tags$head(tags$style("#weight_error_message{color: red;
#                              font-size: 12px;
#                              font-style: italic;
#                              }"))
#        )
# ),
#
# fluidRow(
#       column(3,
#         numericInput("height", "height*", NULL, min = min(bodyfat$HEIGHT), max = max(bodyfat$HEIGHT)),
#         textOutput('height_error_message'),
#         tags$head(tags$style("#height_error_message{color: red;
#                              font-size: 12px;
#                              font-style: italic;
#                              }"))
#        )
#
# ),
# fluidRow(
#   column(3,plotOutput('result_bar'))
# ),
#
#
# actionButton("button", "View your result"),
# textOutput('final_prediction'),
# tags$head(tags$style("#final_prediction{color: green;
#                    font-size: 20px;
#                    font-style: bold;
#                    }")),
# )
server <- function(input, output) {
#import df
bodyfat_data <- reactive({
bodyfat
})
#set the necessary input here
iv <- InputValidator$new()
iv$add_rule("age", sv_required())
iv$add_rule("height", sv_required())
iv$enable()
#Below are the range of each input and error message
output$age_error_message <- reactive({
validate(need((input$age >= 18 && input$age <= 90),
"wrong input: age should be between 18 and 90"))
})
output$weight_error_message <- reactive({
validate(need((input$weight >= 40 && input$weight <= 200),
"wrong input: weight should be between 40kg to 200kg"))
})
output$height_error_message <- reactive({
validate(need((input$height > 140 && input$height < 220),
"wrong input: height should be between 140cm and 220cm"))
})
#Button setup
observeEvent(input$button,{
if ( (input_provided(input$age) & input_provided(input$weight) & input_provided(input$height)) == TRUE){
if ( (input$age <= 90 & input$age >= 18) &
(input$weight <= 200 & input$weight >= 40) &
(input$height <= 220 & input$height >= 140)){
output$final_prediction <-renderText({
input$button
req(input$button)
test_df = data.frame()
test_df[1,] = c(1)
model_formula = paste('BODYFAT','HEIGHT', sep = '~')
if (isTruthy(input$age)){
model_formula = paste(model_formula,'AGE',sep = '+')
test_df$AGE = c(input$age)
}
if (isTruthy(input$weight)){
model_formula = paste(model_formula,'WEIGHT',sep = '+')
test_df$WEIGHT = c(input$weight)
}
if (isTruthy(input$height)){
test_df$HEIGHT = c(input$height)
}
model <- lm(model_formula, data = bodyfat_data())
model_prediction <- predict(model, newdata = test_df)
isolate(paste0('\n','You body fat is ', model_prediction ,'%'))
test_df$body_fat = c(model_prediction)
output$result_bar <- renderPlot({
barplot(test_df$body_fat,ylim=c(0,60),ylab = 'Body fat level', col = 'blue')
})
if( model_prediction < 13 & model_prediction >6){
print(paste0('\n','You body fat is ', model_prediction ,'%', ' and ',
'You have an athlete bodyfat'))
}
else if (model_prediction < 17 & model_prediction >14){
print(paste0('\n','You body fat is ', model_prediction ,'%', ' and ',
'You look fit'  ))
}
else if (model_prediction < 24 & model_prediction >18){
print(paste0('\n','You body fat is ', model_prediction ,'%', ' and ',
'You bodyfat level is normal'   ))
}
else if (model_prediction>25){
print(paste0('\n','You body fat is ', model_prediction ,'%',' and ',
'You might need to hit the gym'      ))
}
})
}
}
else if( (input_provided(input$age) & input_provided(input$weight) & input_provided(input$height)) == FALSE){
showModal(modalDialog(title = 'Warning!!!','Please fiil out all the required fields!!!'))
hide('final_prediction')
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyvalidate)
library(shinyjs)
library(tidyverse)
bodyfat <- read.csv('BodyFat_Clean.csv')
ui <- fluidPage(
#set title
titlePanel("Body fat prediction"),
tags$head(tags$style(HTML(" .shiny-output-error-validation {color: #ff0000;font-weight: bold;}"))),
numericInput("age", "age*:", NULL, min = 18, max = 90),
textOutput('age_error_message',),
tags$head(tags$style("#age_error_message{color: red;font-size: 12px;font-style: italic; }")),
numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
textOutput('weight_error_message'),
tags$head(tags$style("#weight_error_message{color: red;
font-size: 12px;
font-style: italic;
}")),
numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
textOutput('weight_error_message'),
tags$head(tags$style("#weight_error_message{color: red;font-size: 12px;font-style: italic;}")),
actionButton("button", "View your result"),
plotOutput('result_bar'),
textOutput('final_prediction'),
tags$head(tags$style("#final_prediction{color: green;font-size: 20px;font-style: bold;}"))
# fluidRow(
#   column(width = 4,
#     # wellPanel(
#         numericInput("age", "age*:", NULL, min = 18, max = 90),
#
#
#         numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
#
#
#         numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
#
#
#
#     # )
#   ),
#
#   column(width = 4,
#                   textOutput('age_error_message',),
#         tags$head(tags$style("#age_error_message{color: red;font-size: 12px;font-style: italic; }")),
#
#                   textOutput('weight_error_message'),
#         tags$head(tags$style("#weight_error_message{color: red;font-size: 12px;font-style: italic;}")),
#
#                   textOutput('weight_error_message'),
#         tags$head(tags$style("#weight_error_message{color: red;font-size: 12px;font-style: italic;}"))
#          )
# ),
)
# fluidRow(
#     column(width = 4,
#     textOutput('final_prediction'),
#     tags$head(tags$style("#final_prediction{color: green;font-size: 20px;font-style: bold;}"))
#     ),
#     column(width = 4,plotOutput('result_bar'))
# )
# fluidRow(
#       column(3,
#          numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
#       textOutput('weight_error_message'),
#       tags$head(tags$style("#weight_error_message{color: red;
#                              font-size: 12px;
#                              font-style: italic;
#                              }"))
#        )
# ),
#
# fluidRow(
#       column(3,
#         numericInput("height", "height*", NULL, min = min(bodyfat$HEIGHT), max = max(bodyfat$HEIGHT)),
#         textOutput('height_error_message'),
#         tags$head(tags$style("#height_error_message{color: red;
#                              font-size: 12px;
#                              font-style: italic;
#                              }"))
#        )
#
# ),
# fluidRow(
#   column(3,plotOutput('result_bar'))
# ),
#
#
# actionButton("button", "View your result"),
# textOutput('final_prediction'),
# tags$head(tags$style("#final_prediction{color: green;
#                    font-size: 20px;
#                    font-style: bold;
#                    }")),
# )
server <- function(input, output) {
#import df
bodyfat_data <- reactive({
bodyfat
})
#set the necessary input here
iv <- InputValidator$new()
iv$add_rule("age", sv_required())
iv$add_rule("height", sv_required())
iv$enable()
#Below are the range of each input and error message
output$age_error_message <- reactive({
validate(need((input$age >= 18 && input$age <= 90),
"wrong input: age should be between 18 and 90"))
})
output$weight_error_message <- reactive({
validate(need((input$weight >= 40 && input$weight <= 200),
"wrong input: weight should be between 40kg to 200kg"))
})
output$height_error_message <- reactive({
validate(need((input$height > 140 && input$height < 220),
"wrong input: height should be between 140cm and 220cm"))
})
#Button setup
observeEvent(input$button,{
if ( (input_provided(input$age) & input_provided(input$weight) & input_provided(input$height)) == TRUE){
if ( (input$age <= 90 & input$age >= 18) &
(input$weight <= 200 & input$weight >= 40) &
(input$height <= 220 & input$height >= 140)){
output$final_prediction <-renderText({
input$button
req(input$button)
test_df = data.frame()
test_df[1,] = c(1)
model_formula = paste('BODYFAT','HEIGHT', sep = '~')
if (isTruthy(input$age)){
model_formula = paste(model_formula,'AGE',sep = '+')
test_df$AGE = c(input$age)
}
if (isTruthy(input$weight)){
model_formula = paste(model_formula,'WEIGHT',sep = '+')
test_df$WEIGHT = c(input$weight)
}
if (isTruthy(input$height)){
test_df$HEIGHT = c(input$height)
}
model <- lm(model_formula, data = bodyfat_data())
model_prediction <- predict(model, newdata = test_df)
isolate(paste0('\n','You body fat is ', model_prediction ,'%'))
test_df$body_fat = c(model_prediction)
output$result_bar <- renderPlot({
barplot(test_df$body_fat,ylim=c(0,60),ylab = 'Body fat level', col = 'blue')
})
if( model_prediction < 13 & model_prediction >6){
print(paste0('\n','You body fat is ', model_prediction ,'%', ' and ',
'You have an athlete bodyfat'))
}
else if (model_prediction < 17 & model_prediction >14){
print(paste0('\n','You body fat is ', model_prediction ,'%', ' and ',
'You look fit'  ))
}
else if (model_prediction < 24 & model_prediction >18){
print(paste0('\n','You body fat is ', model_prediction ,'%', ' and ',
'You bodyfat level is normal'   ))
}
else if (model_prediction>25){
print(paste0('\n','You body fat is ', model_prediction ,'%',' and ',
'You might need to hit the gym'      ))
}
})
}
}
else if( (input_provided(input$age) & input_provided(input$weight) & input_provided(input$height)) == FALSE){
showModal(modalDialog(title = 'Warning!!!','Please fiil out all the required fields!!!'))
hide('final_prediction')
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinyvalidate)
library(shinyjs)
library(tidyverse)
bodyfat <- read.csv('BodyFat_Clean.csv')
ui <- fluidPage(
#set title
titlePanel("Body fat prediction"),
tags$head(tags$style(HTML(" .shiny-output-error-validation {color: #ff0000;font-weight: bold;}"))),
numericInput("age", "age*:", NULL, min = 18, max = 90),
textOutput('age_error_message',),
tags$head(tags$style("#age_error_message{color: red;font-size: 12px;font-style: italic; }")),
numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
textOutput('weight_error_message'),
tags$head(tags$style("#weight_error_message{color: red;
font-size: 12px;
font-style: italic;
}")),
numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
textOutput('weight_error_message'),
tags$head(tags$style("#weight_error_message{color: red;font-size: 12px;font-style: italic;}")),
actionButton("button", "View your result"),
plotOutput('result_bar'),
textOutput('final_prediction'),
tags$head(tags$style("#final_prediction{color: green;font-size: 20px;font-style: bold;}"))
)
# fluidRow(
#   column(width = 4,
#     # wellPanel(
#         numericInput("age", "age*:", NULL, min = 18, max = 90),
#
#
#         numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
#
#
#         numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
#
#
#
#     # )
#   ),
#
#   column(width = 4,
#                   textOutput('age_error_message',),
#         tags$head(tags$style("#age_error_message{color: red;font-size: 12px;font-style: italic; }")),
#
#                   textOutput('weight_error_message'),
#         tags$head(tags$style("#weight_error_message{color: red;font-size: 12px;font-style: italic;}")),
#
#                   textOutput('weight_error_message'),
#         tags$head(tags$style("#weight_error_message{color: red;font-size: 12px;font-style: italic;}"))
#          )
# ),
# fluidRow(
#     column(width = 4,
#     textOutput('final_prediction'),
#     tags$head(tags$style("#final_prediction{color: green;font-size: 20px;font-style: bold;}"))
#     ),
#     column(width = 4,plotOutput('result_bar'))
# )
# fluidRow(
#       column(3,
#          numericInput("weight", "weight", NULL, min = min(bodyfat$WEIGHT), max = max(bodyfat$WEIGHT)),
#       textOutput('weight_error_message'),
#       tags$head(tags$style("#weight_error_message{color: red;
#                              font-size: 12px;
#                              font-style: italic;
#                              }"))
#        )
# ),
#
# fluidRow(
#       column(3,
#         numericInput("height", "height*", NULL, min = min(bodyfat$HEIGHT), max = max(bodyfat$HEIGHT)),
#         textOutput('height_error_message'),
#         tags$head(tags$style("#height_error_message{color: red;
#                              font-size: 12px;
#                              font-style: italic;
#                              }"))
#        )
#
# ),
# fluidRow(
#   column(3,plotOutput('result_bar'))
# ),
#
#
# actionButton("button", "View your result"),
# textOutput('final_prediction'),
# tags$head(tags$style("#final_prediction{color: green;
#                    font-size: 20px;
#                    font-style: bold;
#                    }")),
# )
server <- function(input, output) {
#import df
bodyfat_data <- reactive({
bodyfat
})
#set the necessary input here
iv <- InputValidator$new()
iv$add_rule("age", sv_required())
iv$add_rule("height", sv_required())
iv$enable()
#Below are the range of each input and error message
output$age_error_message <- reactive({
validate(need((input$age >= 18 && input$age <= 90),
"wrong input: age should be between 18 and 90"))
})
output$weight_error_message <- reactive({
validate(need((input$weight >= 40 && input$weight <= 200),
"wrong input: weight should be between 40kg to 200kg"))
})
output$height_error_message <- reactive({
validate(need((input$height > 140 && input$height < 220),
"wrong input: height should be between 140cm and 220cm"))
})
#Button setup
observeEvent(input$button,{
if ( (input_provided(input$age) & input_provided(input$weight) & input_provided(input$height)) == TRUE){
if ( (input$age <= 90 & input$age >= 18) &
(input$weight <= 200 & input$weight >= 40) &
(input$height <= 220 & input$height >= 140)){
output$final_prediction <-renderText({
input$button
req(input$button)
test_df = data.frame()
test_df[1,] = c(1)
model_formula = paste('BODYFAT','HEIGHT', sep = '~')
if (isTruthy(input$age)){
model_formula = paste(model_formula,'AGE',sep = '+')
test_df$AGE = c(input$age)
}
if (isTruthy(input$weight)){
model_formula = paste(model_formula,'WEIGHT',sep = '+')
test_df$WEIGHT = c(input$weight)
}
if (isTruthy(input$height)){
test_df$HEIGHT = c(input$height)
}
model <- lm(model_formula, data = bodyfat_data())
model_prediction <- predict(model, newdata = test_df)
isolate(paste0('\n','You body fat is ', model_prediction ,'%'))
test_df$body_fat = c(model_prediction)
output$result_bar <- renderPlot({
barplot(test_df$body_fat,ylim=c(0,60),ylab = 'Body fat level', col = 'blue')
})
if( model_prediction < 13 & model_prediction >6){
print(paste0('\n','You body fat is ', model_prediction ,'%', ' and ',
'You have an athlete bodyfat'))
}
else if (model_prediction < 17 & model_prediction >14){
print(paste0('\n','You body fat is ', model_prediction ,'%', ' and ',
'You look fit'  ))
}
else if (model_prediction < 24 & model_prediction >18){
print(paste0('\n','You body fat is ', model_prediction ,'%', ' and ',
'You bodyfat level is normal'   ))
}
else if (model_prediction>25){
print(paste0('\n','You body fat is ', model_prediction ,'%',' and ',
'You might need to hit the gym'      ))
}
})
}
}
else if( (input_provided(input$age) & input_provided(input$weight) & input_provided(input$height)) == FALSE){
showModal(modalDialog(title = 'Warning!!!','Please fiil out all the required fields!!!'))
hide('final_prediction')
}
})
}
shinyApp(ui, server)
